{"ast":null,"code":"/**\n * @import {VFile, Value} from 'vfile'\n * @import {Location} from 'vfile-location'\n */\n\n/**\n * Create an index of the given document to translate between line/column and\n * offset based positional info.\n *\n * Also implemented in Rust in [`wooorm/markdown-rs`][markdown-rs].\n *\n * [markdown-rs]: https://github.com/wooorm/markdown-rs/blob/main/src/util/location.rs\n *\n * @param {VFile | Value} file\n *   File to index.\n * @returns {Location}\n *   Accessors for index.\n */\nexport function location(file) {\n  const value = String(file);\n  /**\n   * List, where each index is a line number (0-based), and each value is the\n   * byte index *after* where the line ends.\n   *\n   * @type {Array<number>}\n   */\n  const indices = [];\n  return {\n    toOffset,\n    toPoint\n  };\n\n  /** @type {Location['toPoint']} */\n  function toPoint(offset) {\n    if (typeof offset === 'number' && offset > -1 && offset <= value.length) {\n      let index = 0;\n      while (true) {\n        let end = indices[index];\n        if (end === undefined) {\n          const eol = next(value, indices[index - 1]);\n          end = eol === -1 ? value.length + 1 : eol + 1;\n          indices[index] = end;\n        }\n        if (end > offset) {\n          return {\n            line: index + 1,\n            column: offset - (index > 0 ? indices[index - 1] : 0) + 1,\n            offset\n          };\n        }\n        index++;\n      }\n    }\n  }\n\n  /** @type {Location['toOffset']} */\n  function toOffset(point) {\n    if (point && typeof point.line === 'number' && typeof point.column === 'number' && !Number.isNaN(point.line) && !Number.isNaN(point.column)) {\n      while (indices.length < point.line) {\n        const from = indices[indices.length - 1];\n        const eol = next(value, from);\n        const end = eol === -1 ? value.length + 1 : eol + 1;\n        if (from === end) break;\n        indices.push(end);\n      }\n      const offset = (point.line > 1 ? indices[point.line - 2] : 0) + point.column - 1;\n      // The given `column` could not exist on this line.\n      if (offset < indices[point.line - 1]) return offset;\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @param {number} from\n */\nfunction next(value, from) {\n  const cr = value.indexOf('\\r', from);\n  const lf = value.indexOf('\\n', from);\n  if (lf === -1) return cr;\n  if (cr === -1 || cr + 1 === lf) return lf;\n  return cr < lf ? cr : lf;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}