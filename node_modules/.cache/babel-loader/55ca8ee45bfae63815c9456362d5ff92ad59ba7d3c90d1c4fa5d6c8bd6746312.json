{"ast":null,"code":"/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport { checkEmphasis } from '../util/check-emphasis.js';\nemphasis.peek = emphasisPeek;\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state);\n  const exit = state.enter('emphasis');\n  const tracker = state.createTracker(info);\n  let value = tracker.move(marker);\n  value += tracker.move(state.containerPhrasing(node, {\n    before: value,\n    after: marker,\n    ...tracker.current()\n  }));\n  value += tracker.move(marker);\n  exit();\n  return value;\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*';\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}